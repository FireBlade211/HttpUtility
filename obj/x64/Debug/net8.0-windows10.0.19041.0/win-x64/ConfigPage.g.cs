#pragma checksum "C:\Users\Piotr\Projects\Visual Studio Repos\HTTP Utility\ConfigPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "42272F66FDC1A1934312B6FEFA3692A9BE1E52E74137D2B0F2B7078577CDB055"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HttpUtility
{
    partial class ConfigPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_CommunityToolkit_WinUI_Controls_SettingsExpander_Header(global::CommunityToolkit.WinUI.Controls.SettingsExpander obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class ConfigPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IConfigPage_Bindings
        {
            private global::HttpUtility.ConfigPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::CommunityToolkit.WinUI.Controls.SettingsExpander obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj5HeaderDisabled = false;
            private static bool isobj6TextDisabled = false;

            private ConfigPage_obj1_BindingsTracking bindingsTracking;

            public ConfigPage_obj1_Bindings()
            {
                this.bindingsTracking = new ConfigPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 123 && columnNumber == 43)
                {
                    isobj5HeaderDisabled = true;
                }
                else if (lineNumber == 127 && columnNumber == 25)
                {
                    isobj6TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 5: // ConfigPage.xaml line 123
                        this.obj5 = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsExpander>(target);
                        break;
                    case 6: // ConfigPage.xaml line 124
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IConfigPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::HttpUtility.ConfigPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::HttpUtility.ConfigPage obj, int phase)
            {
                this.Update_HttpUtility_Globals_AppTitleName(global::HttpUtility.Globals.AppTitleName, phase);
                this.Update_HttpUtility_Globals_AppVersion(global::HttpUtility.Globals.AppVersion, phase);
            }
            private void Update_HttpUtility_Globals_AppTitleName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ConfigPage.xaml line 123
                    if (!isobj5HeaderDisabled)
                    {
                        XamlBindingSetters.Set_CommunityToolkit_WinUI_Controls_SettingsExpander_Header(this.obj5, obj, null);
                    }
                }
            }
            private void Update_HttpUtility_Globals_AppVersion(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ConfigPage.xaml line 124
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ConfigPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ConfigPage_obj1_Bindings> weakRefToBindingObj; 

                public ConfigPage_obj1_BindingsTracking(ConfigPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ConfigPage_obj1_Bindings>(obj);
                }

                public ConfigPage_obj1_Bindings TryGetBindingObject()
                {
                    ConfigPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                }

            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // ConfigPage.xaml line 30
                {
                    this.RootGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 3: // ConfigPage.xaml line 35
                {
                    this.PageHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 4: // ConfigPage.xaml line 40
                {
                    this.contentSV = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollViewer>(target);
                }
                break;
            case 5: // ConfigPage.xaml line 123
                {
                    this.AboutExpander = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsExpander>(target);
                    ((global::CommunityToolkit.WinUI.Controls.SettingsExpander)this.AboutExpander).Expanded += this.AboutExpander_Expanded;
                }
                break;
            case 7: // ConfigPage.xaml line 129
                {
                    this.githubCard = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsCard>(target);
                    ((global::CommunityToolkit.WinUI.Controls.SettingsCard)this.githubCard).Click += this.githubCard_Click;
                }
                break;
            case 8: // ConfigPage.xaml line 142
                {
                    this.bugRequestCard = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsCard>(target);
                    ((global::CommunityToolkit.WinUI.Controls.SettingsCard)this.bugRequestCard).Click += this.bugRequestCard_Click;
                }
                break;
            case 9: // ConfigPage.xaml line 156
                {
                    this.WinAppSdkLink = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                }
                break;
            case 10: // ConfigPage.xaml line 112
                {
                    this.winBg = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.winBg).SelectionChanged += this.winBg_SelectionChanged;
                }
                break;
            case 11: // ConfigPage.xaml line 84
                {
                    this.soundToggle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.soundToggle).Toggled += this.soundToggle_Toggled;
                }
                break;
            case 12: // ConfigPage.xaml line 86
                {
                    this.SoundVolumeCard = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsCard>(target);
                }
                break;
            case 13: // ConfigPage.xaml line 93
                {
                    this.SpatialAudioCard = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsCard>(target);
                }
                break;
            case 14: // ConfigPage.xaml line 100
                {
                    this.AudioTestCard = global::WinRT.CastExtensions.As<global::CommunityToolkit.WinUI.Controls.SettingsCard>(target);
                    ((global::CommunityToolkit.WinUI.Controls.SettingsCard)this.AudioTestCard).Click += this.AudioTestCard_Click;
                }
                break;
            case 15: // ConfigPage.xaml line 98
                {
                    this.spatialSoundBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)this.spatialSoundBox).Toggled += this.spatialSoundBox_Toggled;
                }
                break;
            case 16: // ConfigPage.xaml line 91
                {
                    this.SoundVolumeSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Slider)this.SoundVolumeSlider).ValueChanged += this.SoundVolumeSlider_ValueChanged;
                }
                break;
            case 17: // ConfigPage.xaml line 72
                {
                    this.navigationLocation = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.navigationLocation).SelectionChanged += this.navigationLocation_SelectionChanged;
                }
                break;
            case 18: // ConfigPage.xaml line 58
                {
                    this.themeMode = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.themeMode).SelectionChanged += this.themeMode_SelectionChanged;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2505")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ConfigPage.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ConfigPage_obj1_Bindings bindings = new ConfigPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

